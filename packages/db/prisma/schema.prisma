// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum AUTH_PROVIDERS {
    credentials
    google
    discord
}

enum PROVIDER_TYPES {
    credentials
    oauth
}

enum PROFILE_STATUS {
    active
    pending
    inactive
}

// Necessary for Next auth
// A user can have multiple accounts
// A user can have multiple profiles for different workspaces
model Account {
    id                  String         @id @default(dbgenerated("gen_random_uuid()"))
    userId              String         @db.Uuid
    type                PROVIDER_TYPES
    provider            AUTH_PROVIDERS
    providerAccountId   String // this is same as userId for credentials provider
    refresh_token       String?        @db.Text
    access_token        String?        @db.Text
    expires_at          Int?
    token_type          String?
    scope               String?
    id_token            String?        @db.Text
    session_state       String?
    // For credentials auth
    verificationCode    String?        @db.Char(6)
    hashedPassword      String?
    salt                String?
    resetToken          String?        
    resetTokenExpiresAt DateTime?
    // ---
    user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)

    // ---
    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid //  @id @default(cuid())
    sessionToken String   @unique
    userId       String   @db.Uuid
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @default(now())
    // ---
    accounts      Account[]
    sessions      Session[]
    profiles      Profile[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    // ---
    @@unique([identifier, token])
}

// e.g. workspace1.example.com
model Workspace {
    id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    createdBy String?
    updatedBy String?
    // ---
    title     String
    domain    String    @unique
    // ---
    profiles  Profile[]
    roles     Role[]
}

model Profile {
    id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    createdBy      String?
    updatedBy      String?
    // ---
    firstName      String
    lastName       String?
    status         PROFILE_STATUS @default(inactive)
    emailAddresses String[] @default([])
    image         String?
    // ---
    invitationCode String?        @unique
    invitedBy      String?        @db.Uuid
    // ---
    workspaceId    String         @db.Uuid
    workspace      Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    userId         String?        @db.Uuid
    user           User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
    roleId         String         @db.Uuid
    role           Role           @relation(fields: [roleId], references: [id])

    // ---
    @@unique([workspaceId, userId])
}

model Role {
    id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    createdBy   String?
    updatedBy   String?
    // ---
    title       String
    // isAdmin check is being able to set a role as isAdmin
    isAdmin     Boolean  @default(false)
    // ---
    workspaceId String    @db.Uuid
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    profiles    Profile[]

    // ---
    @@unique([workspaceId, title])
}
